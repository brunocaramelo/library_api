apiVersion: v1
kind: ConfigMap
metadata:
  name: ${project.name}-v${version.major}-web
data:
  nginx.conf: |    
    server {
        listen 80;
        index index.php index.html;
        root /usr/share/nginx/html;
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass ${project.name}-v${version.major}-fpm:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }
        location / {
            try_files $uri $uri/ /index.php?$query_string;
            gzip_static on;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${project.name}-v${version.major}
data:
  APP_NAME: appLibrary
  APP_ENV: local
  # APP_KEY: "base64:vw6G2uP8LV22haEERtzr5yDCBraLrMwbxlbSJDA97uk="
  APP_DEBUG: "true"
  APP_URL: http://localhost
  # LOG_CHANNEL: stderr
  LOG_STDERR_FORMATTER: Monolog\Formatter\JsonFormatter
  DB_CONNECTION: mysql
  # DB_HOST: mysql-service
  # DB_PORT: "3306"
  # DB_DATABASE: library_admin
  # DB_USERNAME: root
  # DB_PASSWORD: testes
  BROADCAST_DRIVER: log
  # CACHE_DRIVER: redis
  QUEUE_CONNECTION: database
  # SESSION_DRIVER: redis
  SESSION_LIFETIME: "120"
  # REDIS_HOST: redis-service
  # REDIS_PASSWORD: testes
  # REDIS_PORT: "6380"
  MAIL_DRIVER: smtp
  MAIL_HOST: smtp.mailtrap.io
  MAIL_PORT: "2525"
  MAIL_USERNAME: "null"
  MAIL_PASSWORD: "null"
  MAIL_ENCRYPTION: "null"
  AWS_ACCESS_KEY_ID: ""
  AWS_SECRET_ACCESS_KEY: "" 
  AWS_DEFAULT_REGION: us-east-1
  AWS_BUCKET: ""
  PUSHER_APP_ID: ""
  PUSHER_APP_KEY: ""
  PUSHER_APP_SECRET: ""
  PUSHER_APP_CLUSTER: mt1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${project.name}-v${version.major}-web
spec:
  replicas: 1
  selector:
    matchLabels:
     app: ${project.name}-web
     version: v${version.major}-web

  template:
    metadata:
      labels:
        app: ${project.name}-web
        version: v${version.major}-web
    spec:
      containers:
      - name: ${project.name}-v${version.major}-web
        image: nginx:1.19-alpine
        command: ["/bin/sh"]
        args:
            - -c
            - |
              touch /usr/share/nginx/html/index.php;
              nginx -g "daemon off;"
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx/conf.d # mount nginx-conf volumn to /etc/nginx
          readOnly: true
          name: ${project.name}-v${version.major}-web-config
        resources:
          requests:
            memory: "28Mi"
            cpu: "4m"
          limits:
            memory: "68Mi"
            cpu: "50m"
      volumes:
        - name: ${project.name}-v${version.major}-web-config
          configMap:
            name: ${project.name}-v${version.major}-web # place ConfigMap `nginx-conf` on /etc/nginx
            items:
              - key: nginx.conf
                path: nginx.conf
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${project.name}-v${version.major}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${project.name}
      version: v${version.major}

  template:
    metadata:
      labels:
        app: ${project.name}
        version: v${version.major}
    spec:
      containers:
      - name: ${project.name}-v${version.major}
        image: ${project.serverImageRepository}/${project.imageRepository}:v${project.version}
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args:
            - -c
            - |
              php artisan optimize;
              php artisan migrate;
              mkdir /usr/share/nginx;
              ln -s /app/public /usr/share/nginx/html;
              php-fpm
        ports:
        - containerPort: 9000
        resources:
          requests:
            cpu: 50m
            memory: 320Mi
          limits:
            cpu: "60m"
            memory: "400Mi"
        envFrom:
        - configMapRef:
            name: ${project.name}-v${version.major}
        - secretRef:
            name: library-api-variables
            
---
apiVersion: v1
kind: Service
metadata:
  name: ${project.name}-v${version.major}-web
spec:
  type: NodePort
  ports:
  - name: http
    protocol: TCP
    port: 8088
    targetPort: 80
  selector:
   app: ${project.name}-web
---
apiVersion: v1
kind: Service
metadata:
  name: ${project.name}-v${version.major}-fpm
spec:
  type: ClusterIP
  ports:
  - port: 9000
  selector:
   app: ${project.name}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${project.name}-v${version.major}-queue
spec:
  replicas: 1
  selector:
    matchLabels:
     app: ${project.name}-queue
     version: v${version.major}-queue

  template:
    metadata:
      labels:
         app: ${project.name}-queue
         version: v${version.major}-queue
    spec:
      containers:
      - name: ${project.name}-queue
        image: ${project.serverImageRepository}/${project.imageRepository}:v${project.version}
        imagePullPolicy: Always
        command: ["/bin/sh", "-c", "/usr/local/bin/php /app/artisan queue:work --verbose --tries=7 --timeout=90"]
        envFrom:
        - configMapRef:
            name: ${project.name}-v${version.major}
        - secretRef:
            name: library-api-variables
        resources:
          requests:
            cpu: 50m
            memory: 320Mi
          limits:
            cpu: "60m"
            memory: "400Mi"